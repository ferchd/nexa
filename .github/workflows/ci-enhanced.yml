name: CI Enhanced

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC

jobs:
  test:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.19', '1.20', '1.21']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
        
    - name: Run tests
      run: go test -v -race -coverprofile=coverage-${{ matrix.os }}-${{ matrix.go-version }}.out ./...
      
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-${{ matrix.os }}-${{ matrix.go-version }}.out
        flags: ${{ matrix.os }}-go${{ matrix.go-version }}
        name: ${{ matrix.os }}-go${{ matrix.go-version }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run Gosec
      uses: securego/gosec@master
      with:
        args: '-exclude-generated -fmt=sarif -out=gosec-results.sarif ./...'
      continue-on-error: true
        
    - name: Upload Gosec results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yml
        
    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Check for ineffective assignments
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        ineffassign ./...

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        config-file: '.markdown-link-check.json'
        
    - name: Spell check
      uses: rojopolis/spellcheck-github-actions@v0
      with:
        config_path: .spellcheck.yml
        
    - name: Check for broken internal links
      run: |
        npm install -g markdown-link-check
        find . -name "*.md" -print0 | xargs -0 -n1 markdown-link-check

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build all targets
      run: |
        GOOS=linux GOARCH=amd64 go build -o nexa-linux-amd64 ./cmd/nexa
        GOOS=linux GOARCH=arm64 go build -o nexa-linux-arm64 ./cmd/nexa
        GOOS=darwin GOARCH=amd64 go build -o nexa-darwin-amd64 ./cmd/nexa
        GOOS=darwin GOARCH=arm64 go build -o nexa-darwin-arm64 ./cmd/nexa
        GOOS=windows GOARCH=amd64 go build -o nexa-windows-amd64.exe ./cmd/nexa
        
    - name: Test binaries
      run: |
        ./nexa-linux-amd64 --version
        file nexa-linux-amd64 | grep "ELF 64-bit"